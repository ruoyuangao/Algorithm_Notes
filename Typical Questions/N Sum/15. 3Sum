// Hash Table

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        // corner case
        if (nums == null || nums.length < 3) {
            return null;
        }
        
        List<List<Integer>> results = new ArrayList<>();
        
        // Create Hash Table
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        
        for (int i : map.keySet()) {
            int target = - i;
            for (int j : map.keySet()) {
                if (map.containsKey(target - j)) {
                    // sort to avoid duplicate
                    if (j < i || target - j < j) {
                        continue;
                    }
                    
                    // two same val
                    if ((i == j || j == target - j) && map.get(j) < 2) {
                        continue;
                    }
                    if (i == target - j && map.get(i) < 2) {
                        continue;
                    }
                    
                    // three same val
                    if (i == j && i == target - j && map.get(i) < 3) {
                        continue;
                    }
                    
                    results.add(Arrays.asList(i, j, target - j));
                }
            }
            
        }
        
        return results;
    }
}


// Sort and Two Pointer
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        // corner case
        if (nums == null || nums.length < 3) {
            return null;
        }
        
        // Preparation
        List<List<Integer>> results = new ArrayList<>();
        
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length; i++) {
            // do not use duplicate value 
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            
            //convert it into a two sum problem
            int left = i + 1;
            int right = nums.length - 1;
            int target = -nums[i];
            
            while (left < right) {
                if (nums[left] + nums[right] == target) {
                    results.add(Arrays.asList(-target, nums[left], nums[right]));
                    while (left < right && nums[++left] == nums[left - 1]);
                    while (left < right && nums[--right] == nums[right + 1]);
                } else if (nums[left] + nums[right] < target) {
                    left++;
                } else {
                    right--;
                }
            }
        
        }
        
        return results;
        
    }
}
